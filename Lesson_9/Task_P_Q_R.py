# P  - Формат ввода - Сначала вводится поисковый запрос.
# Затем вводятся имена файлов, среди которых следует произвести поиск.
# Формат вывода - Выведите все имена файлов, в которых есть поисковая строка без учета регистра и повторяющихся пробельных символов.
# Если ни в одном файле информация не была найдена, выведите "404. Not Found".
import sys


def normalize_string(string):
    # Убираем все ненужные символы из строки
    return ' '.join(string.replace("&nbsp;&nbsp;&nbsp;&nbsp;", " ").replace("\n", " ").split())


# Поисковой запрос и имена файлов
query = input().casefold().split()
filenames = []
for line in sys.stdin:
    filenames.append(line.strip())

# Получить все строки из всех файлов
contents = []
for filename in filenames:
    with open(filename, 'r', encoding="utf-8") as file:
        contents.append(file.read())

# Получить совпадения, если они есть
results = set()
for index, line in enumerate(contents):
    line = normalize_string(line)
    line_split = line.casefold().split()
    count = 0
    for word in query:
        for w in line_split:
            if word == w:
                count += 1
            if count == len(query):
                results.add(index)

# Вывести результат, если список совпадений не пустой.
if results:
    for result in results:
        print(filenames[result])
else:
    print("404. Not Found")

# Q - Стеганография — способ передачи или хранения информации с учётом сохранения в тайне самого факта 
# такой передачи (хранения).
# В отличие от криптографии, которая скрывает содержимое тайного сообщения, стеганография скрывает 
# сам факт его существования. Как правило, сообщение будет выглядеть как что-либо иное, например, 
# как изображение, статья, список покупок, письмо или судоку. Стеганографию обычно используют 
# совместно с методами криптографии, таким образом, дополняя её.
# Нам был дан файл со скрытым текстом. И было сообщено, что для выделения полезной информации, 
# нужно из каждого кода символа в тексте «выдернуть» последние два байта. Это и будет код символа 
# полезной информации.
# Однако есть одно «но». Если код символа меньше 128 — это и есть полезная информация.
# Разработайте программу, которая из текстового файла выделяет полезную информацию.
# Формат ввода - В файле secret.txt хранится текст.
# Формат вывода - Выведите спрятанное сообщение. 
# Открываем файл с текстом для чтения
with open("secret.txt", "r") as f:
    # Считываем содержимое файла
    text = f.read()

for letter in text:
    ord_letter = ord(letter)
    if ord_letter > 128:
        symbol_bin = bin(ord(letter))
        new_sym = symbol_bin[-8:]
        print(chr(int(f"{new_sym}", 2)), end="")
    else:
        print(chr(ord_letter), end="")  

"""
R - В нашей странице согласно ГОСТ 8.417-2002 
объём информации измеряется в следующих единицах:
бит (б)
Байт (Б) = 8 бит
Килобайт (КБ) = 1024 Б
Мегабайт (МБ) = 1024 КБ
Гигабайт (ГБ) = 1024 МБ
Напишите программу, которая вычисляет объём заданного файла.
Формат ввода - Вводится одно имя файла.
Формат вывода - Выведите объём файла в соответствующих единицах измерения.
При получении дробного значения, произведите округление вверх.
"""
import os
import math

filename = input()

# Используем функцию os.stat() для получения размера файла
file_size = os.stat(filename).st_size

# Переводим размер файла в байты
if file_size < 1024:
    print(f"{math.ceil(file_size)}Б")
elif file_size < 1024**2:
    print(f"{math.ceil(file_size/1024)}КБ")
elif file_size < 1024**3:
    print(f"{math.ceil(file_size/1024**2)}МБ")
else:
    print(f"{math.ceil(file_size/1024**3)}ГБ")